
Problem Evaluation
---------------------------------------

A problem can be evaluate by providing an input array. Also, the constraints can be returned if necessary.
Dependent on the algorithm it can be (1) only the function value (F) returned (2) F and constraint violation (CV)
or (3) F, CV and the constraints (G) itself.
In this framework, a constraint is violated if the G > 0. Otherwise, the solution is treated as feasible.
In case the problem does not have any constraints, but return_constraint_violation is set to true,
a constraint violation of zero for each entry is returned.

.. literalinclude:: ../../pymop/usage/evaluate_problem.py
   :language: python

Problem by String
---------------------------------------


For more convenience all the test problems can be loaded simply by using a string and passing some additional
parameters if necessary.

.. literalinclude:: ../../pymop/usage/get_problem_from_string.py
   :language: python


Custom Problem
---------------------------------------


Moreover, you can define your custom problem:

.. literalinclude:: ../../pymop/usage/define_custom_problem.py
   :language: python


Problem by Function
---------------------------------------

Also, a problem can be generated by providing the evaluation function and variable boundaries.
The number of objectives and constraints are directly set through calling the function once.

.. literalinclude:: ../../pymop/usage/get_problem_from_function.py
   :language: python


Pareto-front
---------------------------------------

Also, for most of the problems the optimal pareto front is stored, or can be generated dynamically.


.. literalinclude:: ../../pymop/usage/calc_pareto_front.py
   :language: python
